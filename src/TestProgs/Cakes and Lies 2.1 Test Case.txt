# *******************************************************
# * Program: Displays and Loops                         *
# *                                                     *
# * Purpose: Iterate through an array of values until   *
# *          the sentinel character is reached, and     *
# *          display the ASCII characters of the array. *
# *          2.1.0 takes advantage of offsets with the  *
# *          rload instruction.                         *
# *                                                     *
# * @author: jl948836, Jordan Lescallette               *
# *                                                     *
# * date/ver: 2/04/16 2.0.0                             *
# *           2/09/16 2.5.0 added loopV2 and loopV3     *
# *           2/20/16 3.0.0 removed loopV3, logic was   *
# *                         faulty. Added loopV4 and    *
# *                         mainV4.                     *
# *                                                     *
# * Results:  The string at Head and Head2 should be    *
# *           printed in the console.                   *
# *******************************************************

# Data Section
          org   0x60
Head:     db    "The cake is a lie",0 #0 is a sentinel value

# *For loopV4 and mainV4
          org   0x72
Head2:    db    "The cake is a lie"
Tail:     db    0
Size:     bss   1
# Code            
          org    0x00
          sip    0x00
          #init. variables     
main:     load   R0,0           #constant 0 & sentinel value                
          load   R1,1           #constant 1
          load   R2,Head        #ptr to start of array
          # **************************************************
          # * To see a different loop run, just change which *
          # * loop you jump to from main. In case of loopV4, *
          # * you need to jump to mainV4.                    *
          # **************************************************
          jmp    mainV4         #jump to specified loop

loopV1:   rload  RF,0[R2]       #get value from address pt. to by R2
          add    R2,R2,R1       #ptr++
          jmpeq  RF=R0,done     #check for sentinel value
          jmp    loopV1         #while not at end of array, continue

# ************************************
# * Same lop as loopV1, except using *
# * iload insead of rload            *
# ************************************
loopV2:   iload  RF,[R2]        #get value from address pt. to by R2   
          add    R2,R2,R1       #ptr++
          jmpeq  RF=R0,done     #check for sentinel value
          jmp    loopV2         #while not at end of array, continue

# ************************************
# * Same lop as loopV1, except using *
# * pre-conditioning                 *
# ************************************
#mainV3:  load RF,Head
#loopV3:   jmpeq  RF=R0,done      #if R2 == sentinel value, then done
#          iload  RF,[R2]         #get value from address pt. to by R2
#          add    R2,R2,R1        #ptr++
#          jmp    loopV3          #while R2 != R0, continue

# ************************************
# * Dynamically Calculates the size  *
# * of the array (by subtracting the *
# * first address of the array [Head]*
# * and he last address of the array *
# * [Tail]). Then uses the size of   *
# * determine if it has iterated to  *
# * the end of the array.            *
# ************************************
mainV4:   load  R2,Head2         #ptr to start of array
          load  R4,0xFF          #R4 <- mask 1111 1111
          load  R3,Tail          #R3 contains address of label Tail
          xor   R4,R2,R4         #Toggle all bits
          add   R4,R4,R1         #add 1
          add   R3,R3,R4         #Tail - Head = sizeOfArray
          store [Size],R3
          
          xor   R0,R0,R0
          load  R0,[Size]        #sizeOfArray
          xor   R3,R3,R3         #Clear R3, will be a counter


loopV4:   jmpeq R3=R0,done       #if R3 == sizeOfArray, then done
          iload RF,[R2]          #get value from address pt. to by R2
          add   R2,R2,R1         #ptr++
          add   R3,R3,R1         #counter++
          jmp   loopV4           #while R3 != sizeOfArray, continue

done:     halt