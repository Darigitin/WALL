*************************** WALL-Listing ***********************
Created date: 04/28/2016 10:55:43 PM


Location    Object Code       Line   Source Statement
                                 1   # ******************************************************************
                                 2   # * Program:  sumIntR.txt - Test Case 1                            *
                                 3   # *                                                                *
                                 4   # * Purpose:  Test the CALL and RET (w/ overload) Operations       *
                                 5   # *           Test the SCALL and SRET Operations                   *
                                 6   # *           Test the RLOAD and ILOAD Operations                  *
                                 7   # *           Test the EQU Pseudo-Op                               *
                                 8   # *           Test the RSTORE and PUSH Operations                  *
                                 9   # *           Test the JMPEQ Operation                             *
                                10   # *                                                                *
                                11   # * @author:  jl948836, Jordan Lescallette                         *
                                12   # *                                                                *
                                13   # * date/ver:  04/14/16 1.0.0                                      *
                                14   # *            04/19/16 1.0.1                                      *
                                15   # *                                                                *
                                16   # * Results: RA should contain "37"                                *
                                17   # *          The rest is just messing around mostly.               *
                                18   # ******************************************************************
                                19   
                                20   # EQU Section
                                21   compReg:    Equ    R0
                                22   o_n_e:      eQu    1
                                23   _zero:      eqU    0
                                24   number:     equ    N
                                25   ref:        equ    temp
                                26   
                                27   # Data Section
                                28               org    0x80
80          0A                  29    N:          db     10
81                              30    Result:     bss    1
                                31   
                                32   # Code Section
                                33               org    0x00
                                34               sip    main
                                35   
00          64 D0               36    setUp:      push   RBP
02          D2 DE               37                move   RBP,RSP
04          42 3D               38    recSum:     rload  R3,2[RBP]
06          43 2D               39                rload  R2,3[basePtr]
08          D0 22               40                iload  R2,[R2]
0A          B2 16               41                jmpeq  R2=compReg,skipFrwd
0C          24 FF               42                load   R4,0xFF
0E          52 24               43                add    R2,R2,R4
10          32 90               44                store [temp],R2
12          22 90               45                load   R2,ref
14          64 20               46                push   R2
16          B3 36               47    secNum:     jmpeq  R3=compReg,done
18          25 FF               48                load   R5,nOne
1A          53 35               49                add    R3,R3,R5
1C          EF E3               50                rstore -1[RSP],R3
1E          5E E5               51                add    RSP,RSP,R5
20          62 04               52                scall  recSum
                                53   
22          21 02               54                load   R1,2
24          51 1D               55                add    R1,R1,RBP
26          D0 21               56                iload  R2,[R1]
28          5A A2               57                add    RA,R10,R2
                                58   
2A          21 03               59                load   R1,0x03
2C          51 1D               60                add    R1,R1,RBP
2E          40 31               61                rload  R3,0[R1]
30          D0 34               62                iload  R3,[R4]
32          5B B3               63                add    RB,RB,R3
34          63 01               64                sret
                                65   
36          9A AA               66    done:       xor    R10,RA,R10
38          9B BB               67                xor    RB,RB,RB
3A          65 D0               68                pop    RBP
3C          61 03               69                ret    2
                                70   
                                71               org    0x40
40          20 00               72    main:       load   compReg,_zero
42          21 01               73                load   R1,o_n_e
44          22 80               74                load   R2,N
46          13 80               75                load   R3,[N]
48          24 90               76                load   R4,ref
4A          64 20               77                push   R2
4C          64 30               78                push   R3
4E          60 00               79                call   setUp
                                80   
50          3A 81               81                store  [Result],retReg
52          21 81               82                load   R1,r
54          E1 1B               83                rstore 1[R1],RB
                                84   
56          C0 00               85                halt
                                86   
                                87   # Data Section
                                88               org    0x90
90                              89    temp:       bss    1
                                90   
                                91   # EQU Section
                                92   r:          equ    Result
                                93   retReg:     equ    RA
                                94   R10:        equ    RA
                                95   basePtr:    equ    RBP
                                96   skipFrwd:   equ    secNum
                                97   nOne:       equ    0xFF


***************** WALL Cross-Reference Listing *******************
Created date: 04/28/2016 10:55:43 PM


         Cross-Reference Listing Description
Labels: The label name that appears in the source program.
Mem_Loc: Memory location of a label in the memory. If the value
         starts with 'R', it represents a register.
Def_Line: Defined line number of a label in the source code.
Ref_line: Referenced line number(s) of a label in the source code.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Labels           Mem_Loc     Def_Line     Ref_line
