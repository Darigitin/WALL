******** Assembler Listing **********
Created date: 03/31/2016 05:48:18 PM


Location    Object Code       Line   Source Statement
                                 1   # *******************************************************
                                 2   # * Program: Displays and Loops                         *
                                 3   # *                                                     *
                                 4   # * Purpose: Iterate through an array of values until   *
                                 5   # *          the sentinel character is reached, and     *
                                 6   # *          display the ASCII characters of the array. *
                                 7   # *          2.1.0 takes advantage of offsets with the  *
                                 8   # *          rload instruction.                         *
                                 9   # *                                                     *
                                10   # * @author: jl948836, Jordan Lescallette               *
                                11   # *                                                     *
                                12   # * date/ver: 2/04/16 2.0.0                             *
                                13   # *           2/09/16 2.5.0 added loopV2 and loopV3     *
                                14   # *           2/20/16 3.0.0 removed loopV3, logic was   *
                                15   # *                         faulty. Added loopV4 and    *
                                16   # *                         mainV4.                     *
                                17   # *                                                     *
                                18   # * Results:  The string at Head and Head2 should be    *
                                19   # *           printed in the console.                   *
                                20   # *******************************************************
                                21   
                                22   # Data Section
                                23             org   0x60
60          54 68 65 20 63      24    Head:     db    "The cake is a lie",0 #0 is a sentinel value
            61 6B 65 20 69            
            73 20 61 20 6C            
            69 65 00                  
                                25   
                                26   # *For loopV4 and mainV4
                                27             org   0x72
72          54 68 65 20 63      28    Head2:    db    "The cake is a lie"
            61 6B 65 20 69            
            73 20 61 20 6C            
            69 65                     
83          00                  29    Tail:     db    0
84                              30    Size:     bss   1
                                31   # Code            
                                32             org    0x00
                                33             sip    0x00
                                34             #init. variables     
00          20 00               35    main:     load   R0,0           #constant 0 & sentinel value                
02          21 01               36              load   R1,1           #constant 1
04          22 60               37              load   R2,Head        #ptr to start of array
                                38             # **************************************************
                                39             # * To see a different loop run, just change which *
                                40             # * loop you jump to from main. In case of loopV4, *
                                41             # * you need to jump to mainV4.                    *
                                42             # **************************************************
06          B0 1A               43              jmp    mainV4         #jump to specified loop
                                44   
08          2F F0 D2 F2         45    loopV1:   rload  RF,0[R2]       #get value from address pt. to by R2
0C          52 21               46              add    R2,R2,R1       #ptr++
0E          BF 38               47              jmpeq  RF=R0,done     #check for sentinel value
10          B0 08               48              jmp    loopV1         #while not at end of array, continue
                                49   
                                50   # ************************************
                                51   # * Same lop as loopV1, except using *
                                52   # * iload insead of rload            *
                                53   # ************************************
12          D0 F2               54    loopV2:   iload  RF,[R2]        #get value from address pt. to by R2   
14          52 21               55              add    R2,R2,R1       #ptr++
16          BF 38               56              jmpeq  RF=R0,done     #check for sentinel value
18          B0 12               57              jmp    loopV2         #while not at end of array, continue
                                58   
                                59   # ************************************
                                60   # * Same lop as loopV1, except using *
                                61   # * pre-conditioning                 *
                                62   # ************************************
                                63   #mainV3:  load RF,Head
                                64   #loopV3:   jmpeq  RF=R0,done      #if R2 == sentinel value, then done
                                65   #          iload  RF,[R2]         #get value from address pt. to by R2
                                66   #          add    R2,R2,R1        #ptr++
                                67   #          jmp    loopV3          #while R2 != R0, continue
                                68   
                                69   # ************************************
                                70   # * Dynamically Calculates the size  *
                                71   # * of the array (by subtracting the *
                                72   # * first address of the array [Head]*
                                73   # * and he last address of the array *
                                74   # * [Tail]). Then uses the size of   *
                                75   # * determine if it has iterated to  *
                                76   # * the end of the array.            *
                                77   # ************************************
1A          22 72               78    mainV4:   load  R2,Head2         #ptr to start of array
1C          24 FF               79              load  R4,0xFF          #R4 <- mask 1111 1111
1E          23 83               80              load  R3,Tail          #R3 contains address of label Tail
20          94 24               81              xor   R4,R2,R4         #Toggle all bits
22          54 41               82              add   R4,R4,R1         #add 1
24          53 34               83              add   R3,R3,R4         #Tail - Head = sizeOfArray
26          33 84               84              store [Size],R3
                                85             
28          90 00               86              xor   R0,R0,R0
2A          10 84               87              load  R0,[Size]        #sizeOfArray
2C          93 33               88              xor   R3,R3,R3         #Clear R3, will be a counter
                                89   
                                90   
2E          B3 38               91    loopV4:   jmpeq R3=R0,done       #if R3 == sizeOfArray, then done
30          D0 F2               92              iload RF,[R2]          #get value from address pt. to by R2
32          52 21               93              add   R2,R2,R1         #ptr++
34          53 31               94              add   R3,R3,R1         #counter++
36          B0 2E               95              jmp   loopV4           #while R3 != sizeOfArray, continue
                                96   
38          C0 00               97    done:     halt
